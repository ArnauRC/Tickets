Pasos para Implementar OAuth2 con Outlook en tu aplicación .NET Blazor
1. Registro de tu aplicación en Azure Active Directory (Azure AD)
Para que tu aplicación .NET Blazor pueda interactuar con la API de Outlook (Microsoft Graph), debes registrar tu aplicación en el portal de Azure Active Directory.

Accede al portal de Azure: https://portal.azure.com/.
Crea un nuevo registro de aplicación:
En el panel izquierdo, ve a Azure Active Directory > Registros de aplicaciones.
Haz clic en Nuevo registro.
Completa los detalles:
Nombre: Pon un nombre descriptivo para tu aplicación.
Tipos de cuentas admitidos: Si quieres que cualquier usuario de Microsoft (incluso los que no sean parte de tu organización) pueda usar la aplicación, selecciona Cuentas de cualquier directorio de la organización y cuentas personales de Microsoft.
URI de redireccionamiento (opcional): Si estás desarrollando una aplicación web, necesitarás especificar una URL de redireccionamiento. Para desarrollo local, podrías usar algo como https://localhost:5001/signin-oidc.
Haz clic en Registrar.
2. Configurar los permisos necesarios para Outlook
Necesitarás otorgar permisos a tu aplicación para que pueda acceder a los correos de Outlook. Esto se hace en el portal de Azure AD:

En el portal de Azure, selecciona tu aplicación registrada.
Ve a API Permissions > Add a permission.
Elige Microsoft Graph > Delegated permissions.
Busca y selecciona los permisos de correo electrónico, como:
Mail.Send (para enviar correos).
Mail.ReadWrite (opcional, si necesitas leer correos).
Haz clic en Add permissions.
3. Obtener las credenciales de cliente
Ahora, necesitarás las credenciales para autenticar tu aplicación:

En la sección Certificates & secrets, crea un Nuevo secreto de cliente. Guarda el valor del secreto, ya que lo necesitarás más tarde.
Anota también el ID de aplicación (Client ID) y el Tenant ID que se encuentran en la sección Overview.
4. Autenticación con OAuth2 en tu aplicación Blazor
Para autenticar a los usuarios con OAuth2, puedes usar la biblioteca Microsoft.Identity.Client (MSAL.NET). Esta biblioteca simplifica el proceso de autenticación con OAuth2 en aplicaciones .NET.

Instalar la biblioteca MSAL.NET: En tu proyecto Blazor, agrega el paquete NuGet Microsoft.Identity.Client:

bash
Copiar
Install-Package Microsoft.Identity.Client
Configurar la autenticación: Debes configurar la autenticación OAuth2 en tu aplicación Blazor para obtener el token de acceso (access token).

Aquí te dejo un ejemplo básico de cómo puedes configurar la autenticación con la biblioteca MSAL.NET:

csharp
Copiar
using Microsoft.Identity.Client;

public class AuthService
{
    private readonly string _clientId = "YOUR_CLIENT_ID"; // Reemplaza con tu Client ID
    private readonly string _tenantId = "YOUR_TENANT_ID"; // Reemplaza con tu Tenant ID
    private readonly string _clientSecret = "YOUR_CLIENT_SECRET"; // Reemplaza con tu Client Secret
    private readonly string[] _scopes = new string[] { "https://graph.microsoft.com/.default" };

    private IConfidentialClientApplication _cca;

    public AuthService()
    {
        _cca = ConfidentialClientApplicationBuilder.Create(_clientId)
            .WithClientSecret(_clientSecret)
            .WithAuthority(new Uri($"https://login.microsoftonline.com/{_tenantId}"))
            .Build();
    }

    public async Task<string> GetAccessTokenAsync()
    {
        var result = await _cca.AcquireTokenForClient(_scopes)
            .ExecuteAsync();
        return result.AccessToken;
    }
}
Usar el token para enviar correos: Una vez que tienes el token de acceso, puedes usarlo para hacer peticiones a la API de Microsoft Graph y enviar correos. Aquí tienes un ejemplo básico de cómo enviar un correo utilizando Microsoft Graph:

csharp
Copiar
using Microsoft.Graph;
using Microsoft.Graph.Auth;
using Microsoft.Identity.Client;

public class OutlookEmailService
{
    private readonly AuthService _authService;

    public OutlookEmailService(AuthService authService)
    {
        _authService = authService;
    }

    public async Task SendEmailAsync(string toEmail, string subject, string body)
    {
        // Obtener el token de acceso
        string accessToken = await _authService.GetAccessTokenAsync();

        // Configurar el cliente Graph
        var client = new GraphServiceClient(
            new DelegateAuthenticationProvider(
                async (requestMessage) =>
                {
                    requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                }));

        // Crear el mensaje de correo
        var message = new Message
        {
            Subject = subject,
            Body = new ItemBody
            {
                ContentType = BodyType.Text,
                Content = body
            },
            ToRecipients = new List<Recipient>
            {
                new Recipient
                {
                    EmailAddress = new EmailAddress
                    {
                        Address = toEmail
                    }
                }
            }
        };

        // Enviar el correo
        await client.Me.SendMail(message, true).Request().PostAsync();
    }
}
5. Implementación en Blazor
En tu aplicación Blazor, puedes llamar al servicio para autenticar al usuario y enviar correos.

Ejemplo de uso en una página de Blazor:

csharp
Copiar
@page "/send-email"
@inject OutlookEmailService EmailService

<button @onclick="SendEmail">Enviar Correo</button>

@code {
    private async Task SendEmail()
    {
        try
        {
            await EmailService.SendEmailAsync("destinatario@ejemplo.com", "Asunto del Correo", "Cuerpo del correo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al enviar el correo: {ex.Message}");
        }
    }
}
6. Pruebas y verificación
Una vez implementado todo, asegúrate de probar que el flujo de autenticación funcione correctamente. Cuando un usuario inicie sesión, tu aplicación debería obtener el token de acceso y poder enviar correos en su nombre.

Resumen de pasos:
Registra la aplicación en Azure AD.
Configura los permisos necesarios (Mail.Send).
Obtén las credenciales (Client ID, Client Secret, Tenant ID).
Implementa la autenticación OAuth2 usando MSAL.NET.
Usa Microsoft Graph para enviar correos con el token obtenido.
Con esto deberías poder implementar la autenticación OAuth2 con Outlook en tu aplicación .NET Blazor. Si necesitas más detalles sobre algún paso o tienes problemas durante la implementación, no dudes en preguntar. ¡Estoy aquí para ayudarte!
